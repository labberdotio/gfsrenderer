
{{#data}}
{{#DHCPServices}}

# 
# Autogenerated DHCP config for {{name}} ({{description}})
# Based on Mastering Ubuntu Server 2nd ed, 18.04
# 

ddns-update-style none;

{{#deployed}}
# Deployed to {{name}}
local-address {{address}};
{{/deployed}}

# option definitions common to all supported networks...
option domain-name "localdomain";
# option domain-name-servers {{#resolvers}}{{#members}}{{#addresses}},{{address}}{{/addresses}}{{/members}}{{/resolvers}};

default-lease-time {{defaultLeaseTime}};
max-lease-time {{maxLeaseTime}};

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# option magic      code 208 = string;
# option configfile code 209 = text;
# option pathprefix code 210 = text;
# option reboottime code 211 = unsigned integer 32;
# #option ipxe.no-pxedhcp 1;
# 
# option client-arch code 93 = unsigned integer 16;

option subnet-mask 255.255.255.0;
option broadcast-address 10.88.88.255;
option domain-name "localdomain";

## subnet below
{{#subnets}}
# 
# Subnet {{name}} ({{description}})
# 
subnet {{#network}}{{address}}{{/network}} netmask {{#netmask}}{{address}}{{/netmask}} {
  range {{#rangeStart}}{{address}}{{/rangeStart}} {{#rangeEnd}}{{address}}{{/rangeEnd}};
  option routers {{#routes}}{{address}}{{/routes}};
  option domain-name-servers {{#resolvers}}{{address}}{{/resolvers}};

  # https://stackoverflow.com/questions/51550326/is-there-any-hook-for-finishing-the-dhcpack-in-isc-dhcp-server
  # https://jpmens.net/2011/07/06/execute-a-script-when-isc-dhcp-hands-out-a-new-lease/
  # https://askubuntu.com/questions/1225344/dhcp-server-cannot-execute-script-permission-denied-exit-32512
  on commit {

    # Get the client name from the first of the following:
    #   1. Client DHCP Option FQDN
    #   2. Client DHCP Option hostname
    #   3. Name of static lease (host-decl-name)
    #   4. A generated name "dyn-${ip}" where ip is the lease IP with dashes, e.g. "dyn-10-0-1-123"
    # 
    # data: host-decl-name: not available
    # 
    # set clientddns = lcase(pick-first-value (option fqdn.hostname, option host-name, host-decl-name, concat ("dyn-", binary-to-ascii(10,8,"-", leased-address)), ""));

    # Get the client dynamic dns domain (different for each subnet)
    set clientdomain = config-option server.ddns-domainname;

    # Get client hostname only (no generated or static). Used by the hook to show which hostname the client requested.
    set clienthost = pick-first-value (option fqdn.hostname, option host-name, "");

    # Get lease IP and hwaddr
    set clientip = binary-to-ascii(10, 8, ".", leased-address);
    set clientmac = binary-to-ascii(16, 8, ":", substring(hardware, 1, 6));

    # Update the dynamic hostname (which wont be set unless the client requested one, so update with the generated if needed)
    # ddns-hostname = clientddns;

    # Execute the hook
    # execute("/etc/dhcp/dhcpevent", "commit", clientip, concat(clientddns, ".", clientdomain), clienthost, clientmac);
      execute("/etc/dhcp/dhcpevent", "commit", clienthost, clientdomain, clientmac, clientip);
  }

  on release {

    # Get the client name from the first of the following:
    #   1. Client DHCP Option FQDN
    #   2. Client DHCP Option hostname
    #   3. Name of static lease (host-decl-name)
    #   4. A generated name "dyn-${ip}" where ip is the lease IP with dashes, e.g. "dyn-10-0-1-123"
    # 
    # data: host-decl-name: not available
    # 
    # set clientddns = lcase(pick-first-value (option fqdn.hostname, option host-name, host-decl-name, concat ("dyn-", binary-to-ascii(10,8,"-", leased-address)), ""));

    # Get the client dynamic dns domain (different for each subnet)
    set clientdomain = config-option server.ddns-domainname;

    # Get client hostname only (no generated or static). Used by the hook to show which hostname the client requested.
    set clienthost = pick-first-value (option fqdn.hostname, option host-name, "");

    # Get lease IP and hwaddr
    set clientip = binary-to-ascii(10, 8, ".", leased-address);
    set clientmac = binary-to-ascii(16, 8, ":", substring(hardware, 1, 6));

    # Update the dynamic hostname (which wont be set unless the client requested one, so update with the generated if needed)
    # ddns-hostname = clientddns;

    # Execute the hook
    # execute("/etc/dhcp/dhcpevent", "release", clientip, concat(clientddns, ".", clientdomain), clienthost, clientmac);
      execute("/etc/dhcp/dhcpevent", "release", clienthost, clientdomain, clientmac, clientip);
  }

  on expiry {

    # Get the client name from the first of the following:
    #   1. Client DHCP Option FQDN
    #   2. Client DHCP Option hostname
    #   3. Name of static lease (host-decl-name)
    #   4. A generated name "dyn-${ip}" where ip is the lease IP with dashes, e.g. "dyn-10-0-1-123"
    # 
    # data: host-decl-name: not available
    # 
    # set clientddns = lcase(pick-first-value (option fqdn.hostname, option host-name, host-decl-name, concat ("dyn-", binary-to-ascii(10,8,"-", leased-address)), ""));

    # Get the client dynamic dns domain (different for each subnet)
    set clientdomain = config-option server.ddns-domainname;

    # Get client hostname only (no generated or static). Used by the hook to show which hostname the client requested.
    set clienthost = pick-first-value (option fqdn.hostname, option host-name, "");

    # Get lease IP and hwaddr
    set clientip = binary-to-ascii(10, 8, ".", leased-address);
    set clientmac = binary-to-ascii(16, 8, ":", substring(hardware, 1, 6));

    # Update the dynamic hostname (which wont be set unless the client requested one, so update with the generated if needed)
    # ddns-hostname = clientddns;

    # Execute the hook
    # execute("/etc/dhcp/dhcpevent", "expiry", clientip, concat(clientddns, ".", clientdomain), clienthost, clientmac);
      execute("/etc/dhcp/dhcpevent", "expiry", clienthost, clientdomain, clientmac, clientip);
  }

}

{{/subnets}}

{{#hosts}}
# 
# Group {{name}} ({{description}})
# 
{{#members}}
# {{name}} ({{description}})
host {{name}} {
  {{#interfaces}}
  hardware ethernet {{hwaddr}}; # {{name}}
  {{#addresses}}
  fixed-address {{address}};
  {{/addresses}}
  {{/interfaces}}
  option host-name {{name}};
}

{{/members}}
{{/hosts}}

{{#aliases}}
# 
# Group {{name}} ({{description}})
# 
{{#members}}
# {{name}} ({{description}})
# host {{name}} {
  {{#interfaces}}
#   hardware ethernet {{hwaddr}}; # {{name}}
  {{#addresses}}
#   fixed-address {{address}};
  {{/addresses}}
  {{/interfaces}}
# }

{{/members}}
{{/aliases}}

{{/DHCPServices}}
{{/data}}
